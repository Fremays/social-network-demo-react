{"version":3,"file":"static/js/778.e03dbd2d.chunk.js","mappings":"gKACA,GAAgB,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,wBAAwB,OAAS,yB,mBCelN,EAZmB,SAACA,GAChB,IAAIC,EAAO,aAAeD,EAAME,GAChC,OACI,gBAAKC,UAAWC,EAAAA,OAAhB,UACI,UAAC,KAAD,CAASD,UAAW,SAAAE,GAAY,OAAIA,EAAaC,SAAWF,EAAAA,OAAaA,EAAAA,IAAzC,EACvBG,GAAIN,EADb,WACmB,gBAAKE,UAAWC,EAAAA,OAAYI,IAAKR,EAAMS,OAAQC,IAAI,WAAgBV,EAAMW,SAGvG,ECAD,G,QATsB,SAACX,GAInB,OACI,gBAAKG,UAAWC,EAAAA,QAAhB,SAA8BJ,EAAMY,SAE3C,G,8BCLKC,EAAkBC,EAAAA,KAAaC,MAAM,CACvCC,YAAaF,EAAAA,KACRG,IAAI,EAAG,8BAkChB,EA/BoB,SAACjB,GAAD,OAEhB,0BACI,SAAC,KAAD,CACIkB,cAAe,CAACF,YAAa,IAC7BG,SAAU,SAAAC,GACN,IAAMC,EAAS,CAAC,EAIhB,OAHKD,EAAOJ,cACRK,EAAOL,YAAc,4BAElBK,CACV,EACDC,SAAU,SAACF,GACPG,QAAQC,IAAIJ,GACZpB,EAAMyB,YAAYL,EAAOJ,aACzBI,EAAOJ,YAAc,EACxB,EACDU,iBAAkBb,EAdtB,SAeK,kBACG,UAAC,KAAD,YACI,gBAAKV,UAAWC,EAAAA,SAAhB,UACI,SAAC,KAAD,CAAOuB,KAAM,OAAQC,KAAM,cAAeC,YAAa,QAE3D,SAAC,KAAD,CAAcD,KAAK,cAAcE,UAAU,SAC3C,mBAAQH,KAAM,SAAd,wBANP,KAlBO,ECsBpB,EAzBgB,SAAC3B,GAEb,IAAI+B,EAAkB/B,EAAMgC,OAAOC,KAAK,SAAAD,GAAM,OAAI,SAAC,EAAD,CAAYrB,KAAMqB,EAAOJ,KAAsBnB,OAAQuB,EAAOvB,QAA1BuB,EAAO9B,GAA/C,IAC1CgC,EAAkBlC,EAAMmC,SAASF,KAAK,SAAArB,GAAO,OAAI,SAAC,EAAD,CAAeA,QAASA,EAAQA,SAAcA,EAAQV,GAA1D,IAGjD,OAAKF,EAAMoC,QAGP,iBAAKjC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,cAAhB,SACK2B,KAEL,iBAAK5B,UAAWC,EAAAA,SAAhB,WAEI,SAAC,EAAD,CAAaqB,YAAazB,EAAMyB,cAE/BS,SAXc,SAAC,KAAD,CAAU3B,GAAI,UAiB5C,E,oBCTD,GAAe8B,E,QAAAA,KACXC,EAAAA,EAAAA,KAhBkB,SAACC,GACnB,MAAO,CACHJ,SAAUI,EAAMC,YAAY5B,QAC5BoB,OAAQO,EAAMC,YAAYC,QAEjC,IACwB,SAACC,GACtB,MAAO,CAEHjB,YAAa,SAACT,GACV0B,GAASC,EAAAA,EAAAA,GAAyB3B,GACrC,EAER,IAIG4B,EAAAA,EAFJ,CAICC,E,mJCpBGC,EAA6B,SAACP,GAC9B,MAAO,CACHH,OAAQG,EAAMQ,KAAKX,OACrB,EAEOQ,EAAmB,SAACI,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAIC,KAAKlD,MAAMoC,QAGVc,KAAKlD,MAAMmD,OAAUD,KAAKlD,MAAMmD,MAAMC,OAAOC,QAFvC,SAACL,GAAD,UAAeE,KAAKlD,SAEmC,SAAC,KAAD,CAAUO,GAAI,UAEnF,KARsC,GACX+C,EAAAA,WAUhC,OADqChB,EAAAA,EAAAA,IAAQQ,EAARR,CAAoCW,EAE5E,C","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/DialogMessage/DialogMessage.jsx","components/Dialogs/DialogsForm.js","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__rocyI\",\"dialogs_items\":\"Dialogs_dialogs_items__H2ZF9\",\"dialog\":\"Dialogs_dialog__Hn1ta\",\"messages\":\"Dialogs_messages__VPhgN\",\"active\":\"Dialogs_active__uD8Kk\",\"avatar\":\"Dialogs_avatar__uPc82\"};","import css from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/messages/\" + props.id;\r\n    return (\r\n        <div className={css.dialog}>\r\n            <NavLink className={dialogActive => dialogActive.isActive ? css.active : css.item}\r\n                     to={path}><img className={css.avatar} src={props.avatar} alt=\"avatar\"></img>{props.Name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import css from \"./../Dialogs.module.css\"\r\nimport React from \"react\";\r\n\r\nconst DialogMessage = (props) => {\r\n\r\n\r\n\r\n    return (\r\n        <div className={css.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default DialogMessage;","import {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport css from './Dialogs.module.css'\r\n\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n    messageArea: Yup.string()\r\n        .min(1, \"This area can't be empty\")\r\n});\r\n\r\nconst DialogsForm = (props) => (\r\n\r\n    <div>\r\n        <Formik\r\n            initialValues={{messageArea: ''}}\r\n            validate={values => {\r\n                const errors = {};\r\n                if (!values.messageArea) {\r\n                    errors.messageArea = 'This area can\\'t be empty';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values) => {\r\n                console.log(values)\r\n                props.sendMessage(values.messageArea)\r\n                values.messageArea = ''\r\n            }}\r\n            validationSchema={loginFormSchema}>\r\n            {() => (\r\n                <Form>\r\n                    <div className={css.messages}>\r\n                        <Field type={'text'} name={'messageArea'} placeholder={''} />\r\n                    </div>\r\n                    <ErrorMessage name=\"messageArea\" component=\"div\"/>\r\n                    <button type={'submit'}>Add post</button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n)\r\n\r\nexport default DialogsForm","import css from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport DialogMessage from \"./DialogMessage/DialogMessage\";\r\nimport React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport DialogsForm from \"./DialogsForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialog.map( dialog => <DialogItem Name={dialog.name} key={dialog.id} avatar={dialog.avatar}/> )\r\n    let messagesElement = props.messages.map( message => <DialogMessage message={message.message} key={message.id}/>)\r\n\r\n\r\n    if (!props.isAuth ) return <Navigate to={\"/login\"} />;\r\n\r\n    return (\r\n        <div className={css.dialogs}>\r\n            <div className={css.dialogs_items}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={css.messages}>\r\n\r\n                <DialogsForm sendMessage={props.sendMessage}/>\r\n\r\n                {messagesElement}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import {sendMessageActionCreator,} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.dialogsPage.message,\r\n        dialog: state.dialogsPage.dialogs\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        sendMessage: (messageArea) => {\r\n            dispatch(sendMessageActionCreator(messageArea));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n(Dialogs);","import React from \"react\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }};\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (this.props.isAuth) {\r\n                return <Component {...this.props}/>\r\n            }\r\n            if (!this.props.match || !this.props.match.params.userId)  return <Navigate to={\"/login\"} />;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent\r\n}"],"names":["props","path","id","className","css","dialogActive","isActive","to","src","avatar","alt","Name","message","loginFormSchema","Yup","shape","messageArea","min","initialValues","validate","values","errors","onSubmit","console","log","sendMessage","validationSchema","type","name","placeholder","component","dialogsElements","dialog","map","messagesElement","messages","isAuth","compose","connect","state","dialogsPage","dialogs","dispatch","sendMessageActionCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","auth","Component","RedirectComponent","this","match","params","userId","React"],"sourceRoot":""}