{"version":3,"file":"static/js/662.6d337a14.chunk.js","mappings":"0KAWA,EATwBA,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KACFG,IAAI,EAAG,oCACPC,IAAI,GAAI,+CACRC,SAAS,YACdC,SAAUN,EAAAA,KACLG,IAAI,EAAG,oCACPE,SAAS,c,iDCFZE,EAAY,SAACC,GAAD,OACd,0BACI,SAAC,KAAD,CACIC,cAAe,CAACP,MAAO,GAAII,SAAU,GAAII,YAAY,GACrDC,SAAU,SAAAC,GACN,IAAMC,EAAS,CAAC,EAQhB,OAPKD,EAAOV,MAGP,2CAA2CY,KAAKF,EAAOV,SAExDW,EAAOX,MAAQ,yBAJfW,EAAOX,MAAQ,WAMZW,CACV,EACDE,SAAU,SAACH,EAAQI,GACfR,EAAMS,MAAML,EAAOV,MAAOU,EAAON,SAAUM,EAAOF,WAAYM,EAAYE,UAE7E,EACDC,iBAAkBC,EAjBtB,SAkBK,SAACC,GAAD,OACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CAAOC,KAAM,OAAQC,KAAM,QAASC,YAAa,cAErD,SAAC,KAAD,CAAcD,KAAK,QAAQE,UAAU,SAErC,0BACI,SAAC,KAAD,CAAOH,KAAM,WAAYC,KAAM,WAAYC,YAAa,gBAE5D,SAAC,KAAD,CAAcD,KAAK,WAAWE,UAAU,SAExC,4BACI,SAAC,KAAD,CAAOH,KAAM,WAAYC,KAAM,gBAC/B,kBAAOG,QAAS,aAAhB,8BAEHL,GAAUA,EAAOM,UACd,gBAAKC,UAAU,UAAf,SAA0BP,EAAOM,WAErC,mBAAQL,KAAM,SAAd,oBACCD,EAAOA,QAAUA,EAAOA,OAAOM,UAC5B,yBAAON,EAAOA,OAAOM,YArBhC,KApBK,EAgElB,GAAeE,EAAAA,EAAAA,KAHS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OADC,GAGgB,CAACd,MAAAA,EAAAA,GAAOgB,OAAAA,EAAAA,IAAhD,EAfc,SAACzB,GACX,OAAIA,EAAMuB,QAEF,SAAC,KAAD,CAAUG,GAAI,cAGd,4BACJ,mCACA,SAAC3B,EAAD,CAAWU,MAAOT,EAAMS,UAE/B,G","sources":["components/Login/LoginFormSchema.js","components/Login/Login.js"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        .max(20, \"Nice try, nobody has a first name that long\")\r\n        .required(\"Required\"),\r\n    password: Yup.string()\r\n        .min(5, \"Must be longer than 8 characters\")\r\n        .required(\"Required\")\r\n});\r\nexport default loginFormSchema;","import {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport loginFormSchema from \"./LoginFormSchema\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst LoginForm = (props) => (\r\n    <div>\r\n        <Formik\r\n            initialValues={{email: \"\", password: \"\", rememberMe: false}}\r\n            validate={values => {\r\n                const errors = {};\r\n                if (!values.email) {\r\n                    errors.email = 'Required';\r\n                } else if (\r\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                ) {\r\n                    errors.email = 'Invalid email address';\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, submitProps) => {\r\n                props.login(values.email, values.password, values.rememberMe, submitProps.setStatus)\r\n                // submitProps.resetForm()\r\n            }}\r\n            validationSchema={loginFormSchema}>\r\n            {(status) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field type={'text'} name={'email'} placeholder={'e-mail'}/>\r\n                    </div>\r\n                    <ErrorMessage name=\"email\" component=\"div\"/>\r\n\r\n                    <div>\r\n                        <Field type={'password'} name={'password'} placeholder={'password'}/>\r\n                    </div>\r\n                    <ErrorMessage name=\"password\" component=\"div\"/>\r\n\r\n                    <div>\r\n                        <Field type={'checkbox'} name={'rememberMe'}/>\r\n                        <label htmlFor={'rememberMe'}> remember me </label>\r\n                    </div>\r\n                    {status && status.message && (\r\n                        <div className=\"message\">{status.message}</div>\r\n                    )}\r\n                    <button type={'submit'}>Log in</button>\r\n                    {status.status && status.status.message && (\r\n                        <div >{status.status.message}</div>\r\n                    )}\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n)\r\n\r\nconst Login = (props) => {\r\n    if (props.isAuth){\r\n        return (\r\n            <Navigate to={\"/profile\"} />\r\n        )\r\n    }\r\n    return (<div>\r\n        <h1>Login</h1>\r\n        <LoginForm login={props.login}/>\r\n    </div>)\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login, logout})(Login)"],"names":["Yup","shape","email","min","max","required","password","LoginForm","props","initialValues","rememberMe","validate","values","errors","test","onSubmit","submitProps","login","setStatus","validationSchema","loginFormSchema","status","type","name","placeholder","component","htmlFor","message","className","connect","state","isAuth","auth","logout","to"],"sourceRoot":""}